uber_ultimate_pipeline(data_path, schools_path, alpha = 0.01, rep_aa=10, rep_b=500, rep_lh=1000, cth=0.3, bootstrap_quantile=False)->pd.DataFrame, pd.DataFrame
это самая верхнеуровневая функция, которая выдает весь pipeline 

data_path - расположение файла с ответами школьников
schools_path - расположение файла со школами учеников
alpha - уровень значимости
rep_aa - количество перемешиваний исходного датафрейма провести для АА теста
rep_b - количество учеников для нечестного датафрейма и подсчета мощности
share_of_cheat - какая доля учеников нечестная в искусственных нечестных школах
rep_lh - количество бутсрап выборок для построения распределение правдоподобия
cth - порог для разбиения в иерархическом кластерном анализе
bootstrap_quantile - использовать для поиска нечестных школ бустрап квантиль по случаныйм школам

возвращает датафрейм с результами метрики для подозрительных школ; кластеры с подозрительными учениками

===
ultimate_pipeline(data, alpha = 0.01, rep_aa=10, rep_b=1000)->pd.DataFrame
верхнеуровневая функция, которая осуществляет тестирование метрики на исходных данных и выдает датафрейм с подозрительными школами
data - исходные данные
alpha - уровень значимости
rep_aa  - количество перемешиваний исходного датафрейма для АА-теста
rep_b - количество школ для тестирования мощности

===
drop_bug_st(df, max_score)->pd.DataFrame
функция удаляет студентов, результат которых превышает максимальный возможный
df - датафрейм с результатами студентов
max_score - максимальный возможный балл

возвращает очищенный датафрейм

===
plot_scores(df)
функция рисует гистограмму распределения итогового результата школьников
df - датафрейм с результатами студентов

===
plot_students(df)
функция рисует гистограмму распределения количества школьников по школам
df - датафрейм с результатами студентов, объединенный со школами (здесь и далее)

===
metric_sim_wrong_ans_weighted_other(df, tasks)->np.array
функция осуществляет подсчет метрики (сумма неправильных совпадающих ответов по школе) 
df - датафрейм с результатами студентов, объединенный со школами
tasks - количество заданий 

возвращает np.array со значениями метрики

===
plot_scatter_stud_vs_metric(studs, res)
функция рисует скаттер-плот количества студентов в школе/значение метрики
studs - количество студентов
res - значение метрики

===
plot_log_metric(log_all_t_weighted)
функция рисует гистограмму значений метрики (логарифмированной усредненной по количеству школьников)
log_all_t_weighted - значений метрики (логарифмированной усредненной по количеству школьников)

===
get_best_distribution(log_all_t_weighted)->float
поиск лучшего распределения для значений метрики
log_all_t_weighted - значений метрики (логарифмированной усредненной по количеству школьников)

возвращает параметры лучшего распределения

===
get_dict_of_wr_ans_probs(df)->dict
функция считает вероятности каждого неправильного ответа по всем ответам
df - исходный датафрейм

возвращает словарь: номер задания-ответ-вероятность

===
shuffle_school(df)-> pd.DataFrame
функция делает "случайный" датафрейм, перемешивая столбец с школой ученика в исходном датафрейме
df - исходный датафрейм

===
new_aa_experiment(df, crytical_value, tasks=8, rep=1)->float
функция считает ошибку первого рода для "случайного" датафрейма
df - исходный датафрейм
crytical_value - критическое значение
tasks - количество заданий в олимпиаде
rep - количество перемешиваний датафрейма

===
make_cheat_school(test_df, schools, share_of_cheat)->pd.DataFrame
функция делает "нечестный" датафрейм, копируя случайного студента и создавая кластер одинаковых студентов
test_df - случайный датафрейм
schools - количество нечестных школ
share_of_cheat - доля нечестных учеников

===
new_power_experiment(df, crytical_value, share_of_cheat=0.3, tasks=8, rep=100)->float
функция считает мощность метрики на нечестном датафрейме
df - датафрейм с результами олимпиады
crytical_value - критическое значения
share_of_cheat - доля нечестных учеников
tasks - количество заданий 
rep - количество нечестных школ

===
get_1_type_error_vs_power(rand: np.array, cheat: np.array, distrib: ss.distribution)-> pd.DataFrame
функция делает таблицу сравнения зависимости ошибки первого рода и мощности в случае использования разных квантилей
rand - распределение метрики на случайных школах
cheat - распределение метрики на искусственно нечестных школах
distrib - распределение метрики на исходных данных

===
transform_data(data, school, tasks=8)->pd.DataFrame
фунция предобрабатывает данные для кластерного анализа: удаляет лишние колонки и аггрегирует ответы по школьникам (в строке session_id, в столбцах - номер задания)
data - исходный датафрейм
school - номер школы
tasks - количество заданий 

===
build_model(data_test, num_tasks=8)->pd.DataFrame, linkage
data_test - предобработанный датафрейм
num_tasks - количество заданий 

функция даммизирует неправильные ответы школьника и на основании этих ответов строит косинусное расстояние между школьниками

возвращает предобработанный датафрейм, linkage иерархического кластерного анализа

===
metric_sim_wrong_ans_weighted_other_cluster(df, max_score = 8)->pd.DataFrame
функция возвращает датафрейм со значениями ключевой метрики по кластерам (сумма совпадающих неправильных ответов в кластере)
df - исходный датафрейм
max_score - количество заданий

===
cluster_analysis(data, school_num, cth)->pd.DataFrame, pd.DataFrame
функция делает кластерный анализ подозрительных школ
data - исходный датафрем
school_num - номер школы для анализа
cth - порог для разбиения на кластеры

возвращает датафрейм с кластерами, датафрейм со значением ключевой метрики

===
get_dict_of_wr_ans_probs(df)->dict
функция считает вероятности каждого неправильного ответа
df - исходный датафрейм

возвращает словарь с вероятностями каждого неправильного ответа

===
get_dict_of_ok_ans_probs(df)->dict
функция считает вероятности каждого правильного ответа
df - исходный датафрейм

возвращает словарь с вероятностями правильного ответа

===
get_cluster_lh(data, ids, dict_ok, dict_wrong, tasks=8)->float
функция считает loglikelihood для конкретного кластера

data - датафрейм исходные данные
ids - список 'session_id' подозрительных учеников
dict_ok - словарь вероятностей правильных ответов
dict_wrong - словарь вероятностей неправильных ответов
tasks - количество заданий 

===
get_lh_bootstrap(n, cor_ans_dict, wr_ans_dict, tasks=8)->float
функция считает бутсрап loglikelihood кластера для фиксированного количества школьников

n - количество школьников 
cor_ans_dict - словарь вероятностей правильных ответов
wr_ans_dict - словарь вероятностей неправильных ответов
tasks - количество заданий 

===
get_lh_distribution(n, cor_ans_dict, wr_ans_dict, tasks=8, rep=1000)->np.array
функция считает бутстрап распределения loglikelihood для фиксированного числа школьников

n - количество школьников
cor_ans_dict - словарь вероятностей правильных ответов
wr_ans_dict - словарь вероятностей неправильных ответов
tasks - количество заданий
rep - количество повторений

===
get_randomness_proba(obs, dist)->float
функция считает вероятность для конкретного наблюдения и распределения (по сути, значение cdf)

obs -loglikelihood наблюдения
dist - распределение loglikelihood

===
convert_to_answer(dict_data)->pd.DataFrame
функция приводит словарь в датафрейм для удобного вывода
dict_data - словарь 